[{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":0,"Expression":"/Users/teweldema.tegegne/src/cis10/function-script/","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"path","Name":"path"},{"ExpressionType":1,"Expression":"shell((f\u0027cd {path}{\u0022fsstudio.react\u0022} \u0026\u0026 npm run build\u0027) log \u0027building react app\u0027)  log (r)=\u003Er","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"build_react","Name":"build_react"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"src","Name":"src"},{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":0,"Expression":"/Users/teweldema.tegegne/project/fsstudio/data/","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"data_folder","Name":"data_folder"},{"ExpressionType":0,"Expression":"/Users/teweldema.tegegne/src/FuncScript/","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"repo_path","Name":"repo_path"},{"ExpressionType":1,"Expression":"file(config.data_folder\u002B\u0022api_key.txt\u0022)","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"api_key","Name":"api_key"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"config","Name":"config"},{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":1,"Expression":"{\n  list:[1,[2,[3,4]],6,[7,8]];\n  f:(l)=\u003Eif(type(l)=\u0022List\u0022,l reduce (x,s)=\u003Es\u002Bf(x)~[],l);\n  return f(list);\n}","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"test","Name":"test"},{"ExpressionType":0,"Expression":"\u0060\u0060\u0060description\nAdd 1 and 2\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n1\u002B2\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n3\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nGenerate a string of of sequare of number from 1 to 4\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\nf\u0022Square of numbers from 1 to 4: {(series(0,4) map (x)=\u003E(x\u002B1)*(x\u002B1)) join \u0027,\u0027}\u0022\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n\u0022Square of numbers from 1 to 4: 1,4,9,16\u0022\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nKey value expression with a value expression referring another key\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  x:12;\n  y:x\u002B2;\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n{\n  \u0022x\u0022: 12,\n  \u0022y\u0022: 14\n}\n\u0060\u0060\u0060\n\n\n\u0060\u0060\u0060description\nKey value expression with a value expression referring a key from a parent\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  x:12;\n  y:{\n    x:5;\n    a:^x\u002B2; //^ is used to refer parent keys\n  };\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n{\n  \u0022x\u0022: 12,\n  \u0022y\u0022: \n  {\n    \u0022x\u0022:5;\n    \u0022a\u0022:14;\n  }\n}\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nSeries function\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\nseries(0,3)\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n[0,1,2]\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nIf expression\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  x:13;\n  return if(x\u003E0,\u0027positive\u0027,if(x\u003C0,\u0027negative\u0027,\u0027zero\u0027));\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n\u0022positive\u0022\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\ncase expression, note equality operator is = not ==\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  x:13;\n  return case x=0:\u0027Zero\u0027, x%2=0:\u0027Even none zero\u0027,\u0027Odd none zero\u0027;\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n\u0022Odd none zero\u0022\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nError handling\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  x:[1,2,3];\n  f:x first (x)=\u003Ex\u003E5;\n  return if(IsError(f),\u0022Not found\u0022,\u0022Found\u0022)\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n\u0022Not found\u0022\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nreduce function\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n[1,2,3] reduce (x,s)=\u003Es*x ~ 5; //special syntax for providing initial value\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n30\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nWrite a funcsript code using len function\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\nlen([1,2,3])\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n3\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nWrite a  code using in function\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n3 in [1,2,3]\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\ntrue\n\u0060\u0060\u0060\n\n\n\u0060\u0060\u0060description\nWrita demonistrating the use of auto-key\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  x:5;\n  y:x\u002B2;\n  c:4;\n  return {x,c}; \n  //{x:x,c:c} is not allowed in FuncScript, it will cause circular refernce hence stack overflow on the execustion engine, another alternative syntax that will avoid circuar reference is parent reference syntax {x:^x,c:^c}\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n{ \u0022x\u0022:5, \u0022c\u0022:4}\n\u0060\u0060\u0060\n\n\n\u0060\u0060\u0060description\nWrita a function to flatten a nested list:\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  list:[1,[2,[3,4]],6,[7,8]];\n  f:(l)=\u003Eif(type(l)=\u0022List\u0022,l reduce (x,s)=\u003Es\u002Bf(x)~[],l);\n  return f(list);\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n[ 1, 2, 3, 4, 6, 7, 8 ]\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nCalculate the duration of a project\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  project: {\n    name: \u0022Website Redesign\u0022;\n    startDate: \u00222023-01-15\u0022;\n    endDate: \u00222023-03-10\u0022;\n  };\n  \n  parseDate: (dateStr)=\u003E\n  {\n      parts:split(dateStr, \u0022-\u0022);\n      return parse(parts[0],\u0022int\u0022) * 365 \u002B parse(parts[1],\u0022int\u0022) * 30 \u002B parse(parts[2],\u0022int\u0022);\n  };\n  \n  duration: parseDate(project.endDate) - parseDate(project.startDate);\n  \n  return { project, duration };\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n{\n  \u0022project\u0022:{ \u0022name\u0022:\u0022Website Redesign\u0022, \u0022startDate\u0022:\u00222023-01-15\u0022, \u0022endDate\u0022:\u00222023-03-10\u0022},\n  \u0022duration\u0022:55\n}\n\u0060\u0060\u0060","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"seed_null","Name":"seed_null"},{"ExpressionType":1,"Expression":"r:{\n  \u0022desc\u0022:{\n    \u0022lang\u0022:\u0022description\u0022,\n    \u0022code\u0022:\u0022Create a list of smartphones with their features and return only those that include a specific feature.\\u000a\u0022\n  },\n  \u0022code\u0022:{\n    \u0022lang\u0022:\u0022funcscript\u0022,\n    \u0022code\u0022:\u0022{\\u000a  smartphones: [\\u000a    {name: \u0027iPhone 14\u0027, features: [\u00275G\u0027, \u0027Face ID\u0027, \u0027OLED\u0027]},\\u000a    {name: \u0027Samsung Galaxy S22\u0027, features: [\u00275G\u0027, \u0027Triple Camera\u0027, \u0027OLED\u0027]},\\u000a    {name: \u0027Google Pixel 6\u0027, features: [\u00275G\u0027, \u0027AI Camera\u0027, \u0027OLED\u0027]},\\u000a    {name: \u0027OnePlus 9\u0027, features: [\u00275G\u0027, \u0027Fast Charging\u0027, \u0027Fluid AMOLED\u0027]}\\u000a  ];\\u000a  targetFeature: \u00275G\u0027;\\u000a\\u000a  // Directly filter smartphones that contain the target feature\\u000a  phonesWithFeature: smartphones filter (phone) =\u003E \\u000a    (phone.features any (feature) =\u003E feature = targetFeature); // Check if any feature matches\\u000a\\u000a  // Return the names of smartphones with the target feature\\u000a  return phonesWithFeature map (phone) =\u003E {name: phone.name};\\u000a}\\u000a\u0022\n  },\n  \u0022res\u0022:{\n    \u0022lang\u0022:\u0022json\u0022,\n    \u0022code\u0022:\u0022[\\u000a  {\\\u0022name\\\u0022: \\\u0022iPhone 14\\\u0022},\\u000a  {\\\u0022name\\\u0022: \\\u0022Samsung Galaxy S22\\\u0022},\\u000a  {\\\u0022name\\\u0022: \\\u0022Google Pixel 6\\\u0022},\\u000a  {\\\u0022name\\\u0022: \\\u0022OnePlus 9\\\u0022}\\u000a]\\u000a\u0022\n  }\n};\nr.code.code","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"test2","Name":"test2"},{"ExpressionType":1,"Expression":"findcodeblocks(chatgpt(config.api_key,\u0027gpt-4o\u0027,inst log \u0027requesting\u0027))","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"gen_sample","Name":"gen_sample"},{"ExpressionType":1,"Expression":"(sd)=\u003Ef\u0022FuncScript is a purely functional programming langauge. Here are examples:\n{sd}\nGenerate an example expression and your expected result. Try to compose an example type that are underrepresented in the example above. Generate only one example.\nFormat your output as follows\n\n\u0060\u0060\u0060description\n\u003CDescription of your example\u003E\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n\u003CThe FuncScript expression\u003E\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n\u003CExpected result as json\u003E\n\u0060\u0060\u0060\n\u0022;\n","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"inst","Name":"inst"},{"ExpressionType":1,"Expression":"(c)=\u003Eif(len(c)!=2,[false,\u0022Exactly two code blocks are expected\u0022],{\n  fs:c filter (b)=\u003Eb.lang=\u0027javascript\u0027,\n  res:c filter (b)=\u003Eb.lang=\u0027json\u0027,\n  return if(fs=null,[false,\u0022Your reply didn\u0027t include javascript code block\u0022],\n  if(res=null,[false,\u0022Your reply didn\u0027t include json code block\u0022],[true,fs[0].code,res[0].code]))\n})","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"verify","Name":"verify"},{"ExpressionType":1,"Expression":"(c)=\u003E{\n  v:verify(c);\n  p:if(v=null,null,parse(c,\u0022fs\u0022))\n}","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"check","Name":"check"},{"ExpressionType":1,"Expression":"fn:config.data_folder\u002B\u0022lang_seed.txt\u0022;\n\nmodel:\u0027o1-mini\u0027;\ndo_chat:(p)=\u003Echatgpt(config.api_key,model,p);\n\nrun_one:(sd)=\u003E{\n  p:inst(sd);\n  chat:do_chat(p log \u0027First attempt\u0027);\n  v:try_hard(model,p,chat);\n  ret:if(len(e)=0,if(v=null,{desc:^desc.code,code:^code.code,res:^res.code},v),e[0]);\n  return if(isError(ret),ret log f\u0027Error\\n{chat}\\n{format(ret)}\u0027,ret);\n};\nres:series(0,10) reduce \n  (i,s)=\u003E{\n    seed:seed_null\u002B\u0022\\n\u0022\u002Brandom_seed;\n    r:run_one(seed log f\u0027doing: {i\u002B1}\u0027);\n    new_seed:f\u0022\\n{code_block(r.desc,\u0027description\u0027)}\\n{code_block(r.code,\u0027funcscript\u0027)}\\n{code_block(r.res,\u0027json\u0027)}\u0022;\n    sv:AppendText(fn,new_seed);\n    return if([r,sv] any (x)=\u003Eiserror(x),[r,sv] first (x)=\u003EIsError(x),(s\u002B1) log f\u0027Found {s\u002B1}\u0027);\n}~0;\nf\u0022{res} new entries\u0022;\n","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"iterate","Name":"iterate"},{"ExpressionType":1,"Expression":"cb:findcodeblocks(seed);\ndesc:cb filter (x)=\u003Ex.lang=\u0027description\u0027;\ncode:cb filter (x)=\u003Ex.lang=\u0027funcscript\u0027;\nres:cb filter (x)=\u003Ex.lang=\u0027json\u0027;\nchecks:[\n  if(len(desc)!=len(code) or len(res)!=len(code),Error(\u0027Number code, description and result don\\\u0027t match\u0027),null) //length check\n  ];\nok:checks filter (x)=\u003EisError(x);\n\nverify:series(0,len(code)) map(i)=\u003E\n{\n  index:i,\n  t:verify_one(code[i].code  log (x)=\u003Ef\u0027verifying\\n{x}\u0027,res[i].code);\n};\n(verify filter (x)=\u003EIsError(x.t)) map (a)=\u003Ef\u0022{a.index\u002B1}: {format(a.t)}\u0022","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"verify_seed","Name":"verify_seed"},{"ExpressionType":1,"Expression":"(code,res)=\u003E\n{\n    code_res:fs_eval(code);\n    res_res:fs_eval(res);\n    e:code_res=res_res;\n    e1:IsError(code_res);\n    e2:IsError(code_res);\n    return case e1:code_res,e2:res_res,code_res=res_res:null,Error(f\u0022Result doesn\u0027t match evaluation result:\\n{format(res_res)}\u0022);\n};","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"verify_one","Name":"verify_one"},{"ExpressionType":1,"Expression":"(code,lang)=\u003Ef\u0022\u0060\u0060\u0060{lang}\\n{trim(code)}\\n\u0060\u0060\u0060\u0022;","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"code_block","Name":"code_block"},{"ExpressionType":1,"Expression":"fn:config.data_folder\u002B\u0027lang_seed.txt\u0027;\nif(fileexists(fn),seed_null\u002B\u0022\\n\u0022\u002Bfile(fn),seed_null)","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"seed","Name":"seed"},{"ExpressionType":1,"Expression":"(fs)=\u003E\n{\n  exp:savefile(in_file,fs);\n  dll:\u0022/Users/teweldema.tegegne/src/FuncScript/FsStudio.Server.FileSystem/bin/Debug/net8.0/FsStudio.Server.FileSystem.dll\u0022;\n  in_file:config.data_folder\u002B\u0022input.fx\u0022;\n  cmd:if(isError(exp),exp,f\u0022/opt/homebrew/bin/dotnet {dll} --input:{in_file}\u0022);\n  sh:shell(cmd,nul,3000);\n  sh_out:sh.OutPut reduce (x,s)=\u003Es\u002B\u0022\\n\u0022\u002Bx.Msg;\n  return if(sh.ExitCode=0,parse(sh_out,\u0027fs\u0027),Error(sh_out));\n}","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"fs_eval","Name":"fs_eval"},{"ExpressionType":1,"Expression":"(desc,code,res)=\u003E\n{\n  sys:\u0022You are a FuncScript coding assistant\u0022;\n  p:f\u0022Write a funcscipt code that does the following:\n{desc}\u0022;\n  r:code_block(code,\u0027funcscript\u0027);\n  entry:\n  {\u0022messages\u0022: [{\u0022role\u0022: \u0022system\u0022, \u0022content\u0022: sys}, {\u0022role\u0022: \u0022user\u0022, \u0022content\u0022: p}, {\u0022role\u0022: \u0022assistant\u0022, \u0022content\u0022:r }]};\n\n  return replaceall(tojson(entry),\u0022\\n\u0022,\u0022\u0022);\n}","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"create_ft_entry","Name":"create_ft_entry"},{"ExpressionType":1,"Expression":"fn:config.data_folder\u002B\u0027funcscript_set.jsonl\u0027;\n\ncb:findcodeblocks(seed_null\u002B\u0022\\n\u0022\u002Bseed);\ndesc:cb filter (x)=\u003Ex.lang=\u0027description\u0027;\ncode:cb filter (x)=\u003Ex.lang=\u0027funcscript\u0027;\nres:cb filter (x)=\u003Ex.lang=\u0027json\u0027;\nchecks:[\n  if(len(desc)!=len(code) or len(res)!=len(code),Error(\u0027Number code, description and result don\\\u0027t match\u0027),null) //length check\n  ];\nok:checks filter (x)=\u003EisError(x);\n\nft_set:(series(0,len(code)) map(i)=\u003Ecreate_ft_entry(desc[i].code, code[i].code,res[i].code)) join \u0027\\n\u0027;\n\nsavefile(fn,ft_set log f\u0027{len(code)} training exammples saved\u0027);\n","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"generate_ft_set","Name":"generate_ft_set"},{"ExpressionType":1,"Expression":"n_picks:40;\nfn:config.data_folder\u002B\u0027lang_seed.txt\u0027;\ns:file(fn);\ncb:findcodeblocks(s);\n\ndesc:cb filter (x)=\u003Ex.lang=\u0027description\u0027;\ncode:cb filter (x)=\u003Ex.lang=\u0027funcscript\u0027;\nres:cb filter (x)=\u003Ex.lang=\u0027json\u0027;\n\nchecks:[\n  if(len(desc)!=len(code) or len(res)!=len(code),Error(\u0027Number code, description and result don\\\u0027t match\u0027),null)\n  ];\nok:checks filter (x)=\u003EisError(x);\nn:len(desc);\nthis_n:min(n_picks,n);\nri:series(0,n) reduce (x,s)=\u003E{\n  r:randomint(0,n);\n  next:if(r in s,s,s\u002B[r]);\n  return if(len(next)=this_n,break(next),next);\n} ~[];\nret:(ri map (x)=\u003Ef\u0022{code_block(desc[x].code,desc[x].lang)}\n{code_block(code[x].code,code[x].lang)}\n{code_block(res[x].code,res[x].lang)}\u0022) join \u0027\\n\\n\u0027;\nif(len(ok)\u003E0,ok[0],ret)","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"random_seed","Name":"random_seed"},{"ExpressionType":1,"Expression":"do_chat:(model,p)=\u003Echatgpt(config.api_key,model,p);\n\np:inst(seed_null\u002B\u0022\\n\u0022\u002Brandom_seed);\nf:(model,p,attempt)=\u003E\n{\n  return series(0,5) reduce (x,s)=\u003E\n  {\n    cb:findcodeblocks(s.tries[len(s.tries)-1]);\n    desc:cb first (x)=\u003Ex.lang=\u0027description\u0027;\n    code:(cb first (x)=\u003Ex.lang=\u0027funcscript\u0027);\n    res:cb first (x)=\u003Ex.lang=\u0027json\u0027;\n    format_error:[desc,code,res] any (x)=\u003Eiserror(x);\n    \n    vrs:verify_one(code.code,res.code) log f\u0027Verifying {s.n} : code \\n{code.code}\\nres \\n{res.code}\u0027;\n    err_msg:\u0027fix the error below for the code above:\\n\u0027\u002Bsubstring(format(vrs),0,500);\n    new_chat:s.tries\u002B[err_msg];\n    c:do_chat(model,new_chat log (c)=\u003Ef\u0027Retrying {(c map (x,i)=\u003E(i\u002B1)\u002B\u0022. \u0022\u002B substring(x,0,50)\u002B\u0022\\n..\u0022) join \u0027\\n\u0027}\u0027);\n    ret:\n    {\n      n:s.n\u002B1,\n      e:case format_error:[desc,code,res] first (x)=\u003Eiserror(x),\n            iserror(vrs):vrs,\n            null;\n      tries:new_chat\u002B[c];\n    };\n    return if(ret.e=null,break({desc:^desc.code,code:^code.code,res:^res.code}),ret);\n  }~{n:1,tries:[p,attempt],null}\n};\nf;\n\n\n","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"try_hard","Name":"try_hard"},{"ExpressionType":0,"Expression":"\u0060\u0060\u0060description\nCreate a list of smartphones with their features and find all smartphones that include a specific feature, returning their names and features.\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  smartphones: [\n    {name: \u0027iPhone 14\u0027, features: [\u00275G\u0027, \u0027Face ID\u0027, \u0027OLED\u0027]},\n    {name: \u0027Samsung Galaxy S22\u0027, features: [\u00275G\u0027, \u0027Triple Camera\u0027, \u0027OLED\u0027]},\n    {name: \u0027Google Pixel 6\u0027, features: [\u00275G\u0027, \u0027AI Camera\u0027, \u0027OLED\u0027]},\n    {name: \u0027OnePlus 9\u0027, features: [\u00275G\u0027, \u0027Fast Charging\u0027, \u0027Fluid AMOLED\u0027]}\n  ];\n  targetFeature: \u00275G\u0027;\n  phonesWithFeature: (smartphones filter (phone) =\u003E phone.features includes targetFeature);\n  return (phonesWithFeature map (phone) =\u003E {name: phone.name, features: phone.features});\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n[\n  {\u0027name\u0027: \u0027iPhone 14\u0027, \u0027features\u0027: [\u00275G\u0027, \u0027Face ID\u0027, \u0027OLED\u0027]},\n  {\u0027name\u0027: \u0027Samsung Galaxy S22\u0027, \u0027features\u0027: [\u00275G\u0027, \u0027Triple Camera\u0027, \u0027OLED\u0027]},\n  {\u0027name\u0027: \u0027Google Pixel 6\u0027, \u0027features\u0027: [\u00275G\u0027, \u0027AI Camera\u0027, \u0027OLED\u0027]},\n  {\u0027name\u0027: \u0027OnePlus 9\u0027, \u0027features\u0027: [\u00275G\u0027, \u0027Fast Charging\u0027, \u0027Fluid AMOLED\u0027]}]\n\u0060\u0060\u0060","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"sample","Name":"sample"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"process","Name":"process"},{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":1,"Expression":"(o)=\u003EChatGpt(config.api_key,\u0027gpt-4o-mini\u0027,\nf\u0027{o}\n\nIs the above build output indicate success reply with clear text Yes or No\n\u0027);","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"success_build","Name":"success_build"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"util","Name":"util"},{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":1,"Expression":"ex:file(config.repo_path\u002B\u0027FuncScript/Funcs/Math/ModuloFunction.cs\u0027);\ncreate_one:(f)=\u003E\n{\n  exp:f\u0022{f}(0)\u0022;\n  val:parse(exp,\u0022fs\u0022);\n  exist:!IsError(val);\n  c_name:changecase(f\u0022{f}_function\u0022,\u0022Pascal\u0022);\n  fn:f\u0022{config.repo_path}FuncScript/Funcs/Math/{c_name}.cs\u0022;\n  p:f\u0022{ex}\\n\\nWrite {f} function and name it {c_name}\u0022;\n  chat:chatgpt(config.api_key,\u0022gpt-4o-mini\u0022,p  log \u0027generating..\u0027);\n  cb:findcodeblocks(chat) filter (c)=\u003Ec.lang=\u0022csharp\u0022;\n  success:len(cb)=1;\n  return case exist:Error(f\u0022{f} Already exists\u0022), case iserror(chat):chat, case !success:Error(\u0022Code block not found\u0022), \n  savefile(fn,cb[0].code) log \u0027saved\u0027;\n};\n\nfuncs:[\u0022exponentation operator (^)\u0022];\nfuncs map (f)=\u003Ecreate_one(f);","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"generate_math","Name":"generate_math"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"funcs","Name":"funcs"}]