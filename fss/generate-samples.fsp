[{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":0,"Expression":"/Users/teweldema.tegegne/src/cis10/function-script/","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"path","Name":"path"},{"ExpressionType":1,"Expression":"shell((f\u0027cd {path}{\u0022fsstudio.react\u0022} \u0026\u0026 npm run build\u0027) log \u0027building react app\u0027)  log (r)=\u003Er","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"build_react","Name":"build_react"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"src","Name":"src"},{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":0,"Expression":"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","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"api_key","Name":"api_key"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"config","Name":"config"},{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":1,"Expression":"t:(case false:1,null);","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"test","Name":"test"},{"ExpressionType":0,"Expression":"\u0060\u0060\u0060description\nAn example using an operator to perform addition.\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n1\u002B2\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n4\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nA string expression demonstrating a formatted string with a series of calculations.\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\nf\u0022Square of numbers from 1 to 4: {(series(0,4) map (x)=\u003E(x\u002B1)*(x\u002B1)) join \u0027,\u0027}\u0022\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n\u0022Square of numbers from 1 to 4: 1,4,9,16\u0022\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nAn example of a key-value expression defining variables and performing calculations.\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  x:12;\n  y:x\u002B2;\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n{\n  \u0022x\u0022: 12,\n  \u0022y\u0022: 14\n}\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060description\nIf expression\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n{\n  x:13;\n  return if(x\u003E0,\u0027positive\u0027,if(x\u003C0,\u0027negative\u0027,\u0027zero\u0027));\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n\u0022positive\u0022\n\u0060\u0060\u0060","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"seed","Name":"seed"},{"ExpressionType":1,"Expression":"{\n  x:12; \n  y:x\u002B2;\n}{x,y}\n","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"test2","Name":"test2"},{"ExpressionType":1,"Expression":"findcodeblocks(chatgpt(config.api_key,\u0027gpt-4o\u0027,inst log \u0027requesting\u0027))","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"gen_sample","Name":"gen_sample"},{"ExpressionType":1,"Expression":"f\u0022FuncScript is a purely functional programming langauge. Here are examples:\n{seed}\nGenerate an example expression and your expected result.\nFormat your output as follows\n\u0060\u0060\u0060description\n\u003CDescription of your example\u003E\n\u0060\u0060\u0060\n\u0060\u0060\u0060funcscript\n\u003CThe FuncScript expression\u003E\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n\u003CExpected result as json\u003E\n\u0060\u0060\u0060\n\u0022;\n","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"inst","Name":"inst"},{"ExpressionType":1,"Expression":"(c)=\u003Eif(len(c)!=2,[false,\u0022Exactly two code blocks are expected\u0022],{\n  fs:c filter (b)=\u003Eb.lang=\u0027javascript\u0027,\n  res:c filter (b)=\u003Eb.lang=\u0027json\u0027,\n  return if(fs=null,[false,\u0022Your reply didn\u0027t include javascript code block\u0022],\n  if(res=null,[false,\u0022Your reply didn\u0027t include json code block\u0022],[true,fs[0].code,res[0].code]))\n})","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"verify","Name":"verify"},{"ExpressionType":1,"Expression":"(c)=\u003E{\n  v:verify(c);\n  p:if(v=null,null,parse(c,\u0022fs\u0022))\n}","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"check","Name":"check"},{"ExpressionType":1,"Expression":"model:\u0027gpt-4o-mini\u0027;\ndo_chat:(p)=\u003Echatgpt(config.api_key,model,p);\np:inst;\ndo_chat(p log \u0027requesting\u0027);\n\n","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"iterate","Name":"iterate"},{"ExpressionType":1,"Expression":"cb:findcodeblocks(seed);\ndesc:cb filter (x)=\u003Ex.lang=\u0027description\u0027;\ncode:cb filter (x)=\u003Ex.lang=\u0027funcscript\u0027;\nres:cb filter (x)=\u003Ex.lang=\u0027json\u0027;\nchecks:[\n  if(len(desc)!=len(code) or len(res)!=len(code),Error(\u0027Number code, description and result don\\\u0027t match\u0027),null) //length check\n  ];\nok:checks filter (x)=\u003EisError(x);\nverify_one:(code,res)=\u003E\n{\n    code_res:parse(code,\u0027fs\u0027);\n    res_res:parse(res,\u0027fs\u0027);\n    e:code_res=res_res;\n    e1:IsError(code_res);\n    e2:IsError(code_res);\n    return case e1:code_res,e2:res_res,code_res=res_res:null,Error(\u0022Result don\u0027t match evaluation\u0022);\n};\nverify:series(0,len(code)) map(i)=\u003E\n{\n  index:i,\n  t:verify_one(code[i].code,res[i].code);\n};\n//verify;\n(verify filter (x)=\u003EIsError(x.t)) map (a)=\u003Ef\u0022{a.index}: {format(a.t)}\u0022","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"verify_seed","Name":"verify_seed"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"process","Name":"process"},{"ExpressionType":3,"Expression":null,"Children":[{"ExpressionType":1,"Expression":"(o)=\u003EChatGpt(config.api_key,\u0027gpt-4o-mini\u0027,\nf\u0027{o}\n\nIs the above build output indicate success reply with clear text Yes or No\n\u0027);","Children":[],"ParentContext":{"ParentContext":{"ParentContext":{"ParentContext":null}}},"NameLower":"success_build","Name":"success_build"}],"ParentContext":{"ParentContext":{"ParentContext":null}},"NameLower":"util","Name":"util"}]